#! /usr/bin/env python

import sys
import os
import math
import argparse
import logging
from fisher import fisher

############################################################
def PrintHeader( myself, arg ):
    now = datetime.now()

    logging.info( '#' * 84 )
    logging.info( '# Summary' )
    logging.info( '# Generated by {my}'.format( my = myself ) )
    logging.info( '# %(y)d.%(mo)d.%(d)d.%(h)d:%(mi)d' % { 'y': now.year, 'mo': now.month, 'd': now.day, 'h': now.hour, 'mi': now.minute } )
    logging.info( '#' * 84 + '' )
    logging.info( "bam1: {0}".format( arg.bam1 ) )
    logging.info( "bam2: {0}".format( arg.bam2 ) )
    logging.info( "output: {0}".format( arg.output ) )
    logging.info( "reference fastq: {0}".format( arg.ref_fa ) )
    logging.info( "quality_threshold: {0}".format( arg.base_quality ) )
    logging.info( "mismatch_rate: {0}".format( arg.mismatch_rate ) )
    logging.info( "min_depth: {0}".format( arg.min_depth ) )
    logging.info( '-' * 84 + '' )

############################################################
#
# Main
#
def main(arg):

                                
    global arg
    arg = arg_parser.parse_args()

    #
    # logging setup
    #
    # Level     function            value    description
    # CRITICAL  logging.critical()  50      Output only critical errors
    # ERROR     logging.error()     40      Output errors
    # WARNING   logging.warning()   30      Output warnings
    # INFO      logging.info()      20      Output information
    # DEBUG     logging.debug()     10      Output debug information
    # NOTSET                        0       Output all
    #
    level = logging.getLevelName( arg.log_level )

    if arg.log_file:
        logging.basicConfig( filename   = arg.log_file,
                             level      = level,
                             format     = '%(asctime)s %(message)s',
                             datefmt    ='%m/%d/%Y %I:%M:%S%p' )
    else:
        logging.basicConfig( level      = level,
                             format     = '%(asctime)s %(message)s',
                             datefmt    ='%m/%d/%Y %I:%M:%S%p' )
    #
    # Main function
    #
    Pileup_and_count( 
            in_bam1 = arg.bam1,
            in_bam2 = arg.bam2,
            out_file = arg.output,
            input_mpileup = arg.input_mpileup,
            ref_fa = arg.ref_fa,
            threshold = arg.base_quality,
            mismatch_rate = arg.mismatch_rate,
            post_10_q = arg.post_10_q,
            fisher_threshold = arg.fisher_value,
            min_depth = arg.min_depth,
            compare = arg.compare,
            print_header = arg.print_header
          )

