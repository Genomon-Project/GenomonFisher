#! /usr/bin/env python

from fisher.run import *
import argparse

#
# top level parser
#
parser = argparse.ArgumentParser(prog = "fisher")
parser.add_argument("--version", action = "version", version = "GenomonFisher-0.1.0")
subparsers = parser.add_subparsers()

####################
# compare
parse_parser = subparsers.add_parser("comparison")
parse_parser.add_argument( '-1', '--bam1', help = '1st bam file ( disease )', type = str, default = None, required = True )
parse_parser.add_argument( '-2', '--bam2', help = '2nd bam file ( control )', type = str, default = None, required = True )
parse_parser.add_argument( '-o', '--output', help = 'Output text file', type = str, default = None, required = True)
parse_parser.add_argument( '-r', '--ref_fa', help = 'Reference genome in fasta format', type = str, default = None , required = True)
parse_parser.add_argument( '-s', '--samtools_path', type = str, default = None, required = True)

parse_parser.add_argument( '-q', '--mapping_quality', help = 'Mapping quality threshold', type = int, default = 30 )
parse_parser.add_argument( '-Q', '--base_quality', help = 'Base quality threshold', type = int, default = 15 )
parse_parser.add_argument( '-m', '--min_allele_freq', help = 'minimum amount of disease allele frequency', type = float, default = 0.07 )
parse_parser.add_argument( '-M', '--max_allele_freq', help = 'maximum amount of control allele frequency', type = float, default = 0.1 )
parse_parser.add_argument( '-f', '--fisher_value', help = 'fisher threshold', type = float, default = 0.05 )
parse_parser.add_argument( '-d', '--min_depth', help = 'Mimimum depth', type = float, default = 10 )
parse_parser.add_argument( '-v', '--min_variant_read', help = 'Mimimum amount of variant reads (disease)', type = int, default = 4 )

parse_parser.add_argument( '-e', '--print_header', help = 'Print header', action = 'store_true', default = False )
parse_parser.add_argument( '-g', '--log_file', help = "Log file name", type = str, default = None )
parse_parser.add_argument( '-l', '--log_level', help = "Logging level", type = str, default = 'DEBUG' )

parse_parser.set_defaults(func = run_compare)

####################
# single
parse_parser = subparsers.add_parser("single")
parse_parser.add_argument( '-1', '--bam1', help = '1st bam file ', type = str, default = None, required = True )
parse_parser.add_argument( '-o', '--output', help = 'Output text file', type = str, default = None, required = True)
parse_parser.add_argument( '-r', '--ref_fa', help = 'Reference genome in fasta format', type = str, default = None , required = True)
parse_parser.add_argument( '-s', '--samtools_path', type = str, default = None, required = True)

parse_parser.add_argument( '-q', '--mapping_quality', help = 'Mapping quality threshold', type = int, default = 30 )
parse_parser.add_argument( '-Q', '--base_quality', help = 'Base quality threshold', type = int, default = 15 )
parse_parser.add_argument( '-m', '--min_allele_freq', help = 'minimum amount of disease allele frequency', type = float, default = 0.07 )
parse_parser.add_argument( '-p', '--post_10_q', help = '10 percent posterior quantile threshold', type = float, default = 0.02 )
parse_parser.add_argument( '-d', '--min_depth', help = 'Mimimum depth', type = float, default = 10 )
parse_parser.add_argument( '-v', '--min_variant_read', help = 'Mimimum amount of variant reads (disease)', type = int, default = 4 )

parse_parser.add_argument( '-e', '--print_header', help = 'Print header', action = 'store_true', default = False )
parse_parser.add_argument( '-g', '--log_file', help = "Log file name", type = str, default = None )
parse_parser.add_argument( '-l', '--log_level', help = "Logging level", type = str, default = 'DEBUG' )

parse_parser.set_defaults(func = run_single)

####################
  #
  # logging setup
  #
  # Level     function            value    description
  # CRITICAL  logging.critical()  50      Output only critical errors
  # ERROR     logging.error()     40      Output errors
  # WARNING   logging.warning()   30      Output warnings
  # INFO      logging.info()      20      Output information
  # DEBUG     logging.debug()     10      Output debug information
  # NOTSET                        0       Output all
  #
####################
args = parser.parse_args()

args.func(args)


